{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "DC/OS stack (3 AZs)",
    "Metadata": {
        "TemplateGenerationDate": "2016-06-29 17:02:00.000000",
        "DcosImageCommit": "14509fe1e7899f439527fb39867194c7a425c771",
        "Todo" : "/etc/hosts to include ip-x-x-x-x"
    },
    "Parameters": {
        "Ami": {
            "Type": "AWS::EC2::Image::Id",
            "Description": "AMI id (CoreOS)",
            "AllowedPattern": "\\S+",
            "Default": "ami-55d20b26"
        },
        "SshKeyPair": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "SSH key pair"
        },
        "AdminLocation": {
            "Type": "String",
            "Description": "IP range (CIDR) to whitelist for access to the admin zone",
            "Default": "0.0.0.0/0"
        },
        "OAuthEnabled": {
            "Type": "String",
            "Description": "Enable OAuth authentication?",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "true"
        },
        "NumMasterNodes": {
            "Type": "Number",
            "Description": "Number of master nodes",
            "AllowedValues": [
                1,
                3,
                5
            ],
            "Default": "3"
        },
        "NumPrivateSlaveNodes": {
            "Type": "Number",
            "Description": "Number of private slave nodes",
            "MinValue": "5",
            "Default": "5"
        },
        "NumPublicSlaveNodes": {
            "Type": "Number",
            "Description": "Number of public slave nodes",
            "MinValue": "1",
            "Default": "1"
        }
    },
    "Conditions": {
        "RegionIsUsEast1": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-east-1"
            ]
        }
    },
    "Resources": {
        "Vpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.66.0.0/16",
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ]
            }
        },
        "DhcpOptions": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": {
                    "Fn::If": [
                        "RegionIsUsEast1",
                        "ec2.internal",
                        {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    ".compute.internal"
                                ]
                            ]
                        }
                    ]
                },
                "DomainNameServers": [
                    "AmazonProvidedDNS"
                ]
            }
        },
        "VpcDhcpOptionsAssociation": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "DhcpOptionsId": {
                    "Ref": "DhcpOptions"
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ]
            }
        },
        "InternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": "10.66.0.0/22",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PublicSubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": "10.66.4.0/22",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PublicSubnetC": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": "10.66.8.0/22",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "2",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PrivateSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": "10.66.12.0/22",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Private",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PrivateSubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": "10.66.16.0/22",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Private",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PrivateSubnetC": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": "10.66.20.0/22",
                "AvailabilityZone": {
                    "Fn::Select": [
                        "2",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Private",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PrivateRouteTableA": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PrivateRouteTableB": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PrivateRouteTableC": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "Tags": [
                    {
                        "Value": {
                            "Ref": "AWS::StackName"
                        },
                        "Key": "Application"
                    },
                    {
                        "Value": "Public",
                        "Key": "Network"
                    }
                ]
            }
        },
        "PublicSubnetRouteTableAssociationA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetA"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnetRouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetB"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PublicSubnetRouteTableAssociationC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetC"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PrivateSubnetRouteTableAssociationA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnetA"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTableA"
                }
            }
        },
        "PrivateSubnetRouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnetB"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTableB"
                }
            }
        },
        "PrivateSubnetRouteTableAssociationC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnetC"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTableC"
                }
            }
        },
        "NatEipA": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatEipB": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatEipC": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NatGatewayA": {
            "Type": "AWS::EC2::NatGateway",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetA"
                },
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatEipA",
                        "AllocationId"
                    ]
                }
            }
        },
        "NatGatewayB": {
            "Type": "AWS::EC2::NatGateway",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetB"
                },
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatEipB",
                        "AllocationId"
                    ]
                }
            }
        },
        "NatGatewayC": {
            "Type": "AWS::EC2::NatGateway",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnetC"
                },
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatEipC",
                        "AllocationId"
                    ]
                }
            }
        },
        "PublicInternetRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "InternetGatewayAttachment",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PrivateInternetRouteA": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "NatGatewayId": {
                    "Ref": "NatGatewayA"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTableA"
                },
                "DestinationCidrBlock": "0.0.0.0/0"
            }
        },
        "PrivateInternetRouteB": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "NatGatewayId": {
                    "Ref": "NatGatewayB"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTableB"
                },
                "DestinationCidrBlock": "0.0.0.0/0"
            }
        },
        "PrivateInternetRouteC": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "NatGatewayId": {
                    "Ref": "NatGatewayC"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTableC"
                },
                "DestinationCidrBlock": "0.0.0.0/0"
            }
        },
        "LbSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Mesos master LB"
            }
        },
        "AdminSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Enable admin access to servers",
                "SecurityGroupIngress": [
                    {
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "AdminLocation"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "22"
                    },
                    {
                        "ToPort": "80",
                        "CidrIp": {
                            "Ref": "AdminLocation"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "80"
                    },
                    {
                        "ToPort": "443",
                        "CidrIp": {
                            "Ref": "AdminLocation"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "443"
                    }
                ]
            }
        },
        "PublicSlaveSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Mesos slaves public"
            }
        },
        "MasterSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Mesos masters",
                "SecurityGroupIngress": [
                    {
                        "ToPort": "5050",
                        "SourceSecurityGroupId": {
                            "Ref": "LbSecurityGroup"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "5050"
                    },
                    {
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "LbSecurityGroup"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "80"
                    },
                    {
                        "ToPort": "8080",
                        "SourceSecurityGroupId": {
                            "Ref": "LbSecurityGroup"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "8080"
                    },
                    {
                        "ToPort": "8181",
                        "SourceSecurityGroupId": {
                            "Ref": "LbSecurityGroup"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "8181"
                    },
                    {
                        "ToPort": "2181",
                        "SourceSecurityGroupId": {
                            "Ref": "LbSecurityGroup"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "2181"
                    }
                ]
            }
        },
        "SlaveSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "GroupDescription": "Mesos slaves"
            }
        },
        "MasterToMasterIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "SourceSecurityGroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "IpProtocol": "-1",
                "GroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "SlaveToPublicSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "SourceSecurityGroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "IpProtocol": "-1",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "SlaveToMasterIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "SourceSecurityGroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "IpProtocol": "-1",
                "GroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "SlaveToMasterLbIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "2181",
                "SourceSecurityGroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "IpProtocol": "tcp",
                "GroupId": {
                    "Ref": "LbSecurityGroup"
                },
                "FromPort": "2181"
            }
        },
        "PublicSlaveToSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "SourceSecurityGroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "IpProtocol": "-1",
                "GroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "MasterToSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "SourceSecurityGroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "IpProtocol": "-1",
                "GroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "PublicSlaveIngressOne": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "21",
                "CidrIp": "0.0.0.0/0",
                "IpProtocol": "tcp",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "PublicSlaveIngressTwo": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "5050",
                "CidrIp": "0.0.0.0/0",
                "IpProtocol": "tcp",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "FromPort": "23"
            }
        },
        "PublicSlaveIngressThree": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "CidrIp": "0.0.0.0/0",
                "IpProtocol": "tcp",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "FromPort": "5052"
            }
        },
        "PublicSlaveIngressFour": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "21",
                "CidrIp": "0.0.0.0/0",
                "IpProtocol": "udp",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "PublicSlaveIngressFive": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "5050",
                "CidrIp": "0.0.0.0/0",
                "IpProtocol": "udp",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "FromPort": "23"
            }
        },
        "PublicSlaveIngressSix": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "CidrIp": "0.0.0.0/0",
                "IpProtocol": "udp",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "FromPort": "5052"
            }
        },
        "PublicSlaveToMasterIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "SourceSecurityGroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "IpProtocol": "-1",
                "GroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "MasterToPublicSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "SourceSecurityGroupId": {
                    "Ref": "MasterSecurityGroup"
                },
                "IpProtocol": "-1",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "SlaveToSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "SourceSecurityGroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "IpProtocol": "-1",
                "GroupId": {
                    "Ref": "SlaveSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "PublicSlaveToPublicSlaveIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "ToPort": "65535",
                "SourceSecurityGroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "IpProtocol": "-1",
                "GroupId": {
                    "Ref": "PublicSlaveSecurityGroup"
                },
                "FromPort": "0"
            }
        },
        "ExhibitorS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain"
        },
        "MasterRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "ExhibitorS3Bucket"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:s3:::",
                                                    {
                                                        "Ref": "ExhibitorS3Bucket"
                                                    }
                                                ]
                                            ]
                                        }
                                    ],
                                    "Action": [
                                        "s3:AbortMultipartUpload",
                                        "s3:DeleteObject",
                                        "s3:GetBucketAcl",
                                        "s3:GetBucketPolicy",
                                        "s3:GetObject",
                                        "s3:GetObjectAcl",
                                        "s3:ListBucket",
                                        "s3:ListBucketMultipartUploads",
                                        "s3:ListMultipartUploadParts",
                                        "s3:PutObject",
                                        "s3:PutObjectAcl"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:*"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "AWS::StackId"
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Ref": "AWS::StackId"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeKeyPairs",
                                        "ec2:DescribeSubnets",
                                        "autoscaling:DescribeLaunchConfigurations",
                                        "autoscaling:UpdateAutoScalingGroup",
                                        "autoscaling:DescribeAutoScalingGroups",
                                        "autoscaling:DescribeScalingActivities",
                                        "elasticloadbalancing:DescribeLoadBalancers"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "SlaveRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Policies": [
                    {
                        "PolicyName": "Slaves",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:*"
                                    ],
                                    "Resource": [
                                        {
                                            "Ref": "AWS::StackId"
                                        },
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Ref": "AWS::StackId"
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateTags",
                                        "ec2:DescribeInstances",
                                        "ec2:CreateVolume",
                                        "ec2:DeleteVolume",
                                        "ec2:AttachVolume",
                                        "ec2:DetachVolume",
                                        "ec2:DescribeVolumes",
                                        "ec2:DescribeVolumeStatus",
                                        "ec2:DescribeVolumeAttribute",
                                        "ec2:CreateSnapshot",
                                        "ec2:CopySnapshot",
                                        "ec2:DeleteSnapshot",
                                        "ec2:DescribeSnapshots",
                                        "ec2:DescribeSnapshotAttribute"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "MasterInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "MasterRole"
                    }
                ],
                "Path": "/"
            }
        },
        "SlaveInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "SlaveRole"
                    }
                ],
                "Path": "/"
            }
        },
        "PublicSlaveLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": "true",
                "Subnets": [
                    {
                        "Ref": "PublicSubnetA"
                    },
                    {
                        "Ref": "PublicSubnetB"
                    },
                    {
                        "Ref": "PublicSubnetC"
                    }
                ],
                "Listeners": [
                    {
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP"
                    },
                    {
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "443",
                        "InstancePort": "443",
                        "Protocol": "TCP"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "PublicSlaveSecurityGroup"
                    }
                ],
                "HealthCheck": {
                    "Timeout": "2",
                    "Target": "HTTP:9090/_haproxy_health_check",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "2",
                    "Interval": "5"
                }
            }
        },
        "InternalMasterLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Scheme": "internal",
                "CrossZone": "true",
                "Subnets": [
                    {
                        "Ref": "PublicSubnetA"
                    },
                    {
                        "Ref": "PublicSubnetB"
                    },
                    {
                        "Ref": "PublicSubnetC"
                    }
                ],
                "Listeners": [
                    {
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "5050",
                        "InstancePort": "5050",
                        "Protocol": "HTTP"
                    },
                    {
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "2181",
                        "InstancePort": "2181",
                        "Protocol": "TCP"
                    },
                    {
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "8181",
                        "InstancePort": "8181",
                        "Protocol": "HTTP"
                    },
                    {
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP"
                    },
                    {
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "443",
                        "InstancePort": "443",
                        "Protocol": "TCP"
                    },
                    {
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "8080",
                        "InstancePort": "8080",
                        "Protocol": "HTTP"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "LbSecurityGroup"
                    },
                    {
                        "Ref": "AdminSecurityGroup"
                    },
                    {
                        "Ref": "SlaveSecurityGroup"
                    },
                    {
                        "Ref": "PublicSlaveSecurityGroup"
                    },
                    {
                        "Ref": "MasterSecurityGroup"
                    }
                ],
                "HealthCheck": {
                    "Timeout": "5",
                    "Target": "HTTP:5050/health",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "2",
                    "Interval": "30"
                }
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": "true",
                "Subnets": [
                    {
                        "Ref": "PublicSubnetA"
                    },
                    {
                        "Ref": "PublicSubnetB"
                    },
                    {
                        "Ref": "PublicSubnetC"
                    }
                ],
                "Listeners": [
                    {
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP"
                    },
                    {
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "443",
                        "InstancePort": "443",
                        "Protocol": "TCP"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "LbSecurityGroup"
                    },
                    {
                        "Ref": "AdminSecurityGroup"
                    }
                ],
                "HealthCheck": {
                    "Timeout": "5",
                    "Target": "HTTP:5050/health",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "2",
                    "Interval": "30"
                }
            }
        },
        "SlaveLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": "false",
                "ImageId": {
                    "Ref": "Ami"
                },
                "IamInstanceProfile": {
                    "Ref": "SlaveInstanceProfile"
                },
                "KeyName": {
                    "Ref": "SshKeyPair"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sdb",
                        "VirtualName": "ephemeral0"
                    }
                ],
                "InstanceType": "m3.xlarge",
                "SecurityGroups": [
                    {
                        "Ref": "SlaveSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#cloud-config\n",
                                "\"coreos\":\n",
                                "  \"units\":\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                                "      Before=var-lib.mount dbus.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      RemainAfterExit=yes\n",
                                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                                "    \"name\": |-\n",
                                "      format-var-lib-ephemeral.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=AWS Setup: Mount /var/lib\n",
                                "      Before=dbus.service\n",
                                "      [Mount]\n",
                                "      What=/dev/xvdb\n",
                                "      Where=/var/lib\n",
                                "      Type=ext4\n",
                                "    \"name\": |-\n",
                                "      var-lib.mount\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      etcd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      update-engine.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      locksmithd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"name\": |-\n",
                                "      systemd-resolved.service\n",
                                "  - \"command\": |-\n",
                                "      restart\n",
                                "    \"name\": |-\n",
                                "      systemd-journald.service\n",
                                "  - \"command\": |-\n",
                                "      restart\n",
                                "    \"name\": |-\n",
                                "      docker.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Before=dcos.target\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      StandardOutput=journal+console\n",
                                "      StandardError=journal+console\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                                "    \"name\": |-\n",
                                "      dcos-link-env.service\n",
                                "  - \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                                "      After=network-online.target\n",
                                "      Wants=network-online.target\n",
                                "      ConditionPathExists=!/opt/mesosphere/\n",
                                "      [Service]\n",
                                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                                "      Type=oneshot\n",
                                "      StandardOutput=journal+console\n",
                                "      StandardError=journal+console\n",
                                "      ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                                "    \"name\": |-\n",
                                "      dcos-download.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                                "      Requires=dcos-download.service\n",
                                "      After=dcos-download.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      StandardOutput=journal+console\n",
                                "      StandardError=journal+console\n",
                                "      EnvironmentFile=/opt/mesosphere/environment\n",
                                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                                "      [Install]\n",
                                "      WantedBy=multi-user.target\n",
                                "    \"enable\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      dcos-setup.service\n",
                                "    \"no_block\": !!bool |-\n",
                                "      true\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=AWS Setup: Signal CloudFormation Success\n",
                                "      After=dcos.target\n",
                                "      Requires=dcos.target\n",
                                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                                "      [Service]\n",
                                "      Type=simple\n",
                                "      Restart=on-failure\n",
                                "      StartLimitInterval=0\n",
                                "      RestartSec=15s\n",
                                "      EnvironmentFile=/opt/mesosphere/environment\n",
                                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\"\n",
                                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                                "    \"name\": |-\n",
                                "      dcos-cfn-signal.service\n",
                                "  \"update\":\n",
                                "    \"reboot-strategy\": |-\n",
                                "      off\n",
                                "\"write_files\":\n",
                                "- \"content\": |\n",
                                "    https://downloads.dcos.io/dcos/EarlyAccess\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/repository-url\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    BOOTSTRAP_ID=3a2b7e03c45cd615da8dfb1b103943894652cd71\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    [\"dcos-config--setup_b9372277c9fedaca077d7638e6e445af062d1d86\", \"dcos-metadata--setup_b9372277c9fedaca077d7638e6e445af062d1d86\"]\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    [Journal]\n",
                                "    MaxLevelConsole=warning\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    MESOS_CLUSTER=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                                "- \"content\": |\n",
                                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                                {
                                    "Ref": "OAuthEnabled"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                                "- \"content\": |\n",
                                "    MASTER_SOURCE=exhibitor\n",
                                "    EXHIBITOR_ADDRESS=",
                                {
                                    "Fn::GetAtt": [
                                        "InternalMasterLoadBalancer",
                                        "DNSName"
                                    ]
                                },
                                "",
                                "\n",
                                "    RESOLVERS=169.254.169.253\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                                "- \"content\": |\n",
                                "    EXHIBITOR_BACKEND=AWS_S3\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_S3_BUCKET=",
                                {
                                    "Ref": "ExhibitorS3Bucket"
                                },
                                "",
                                "\n",
                                "    AWS_S3_PREFIX=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                                "- \"content\": |\n",
                                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                                "    \"authentication\":{\"enabled\":false},\n",
                                "\n",
                                "    \"oauth\":{\"enabled\":",
                                {
                                    "Ref": "OAuthEnabled"
                                },
                                ",\"authHost\":\"https://dcos.auth0.com\"},",
                                "\n",
                                "\n",
                                "    \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":true}}}}\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                                "- \"content\": |\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_ID=",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_NAME=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "    AWS_IAM_MASTER_ROLE_NAME=",
                                {
                                    "Ref": "MasterRole"
                                },
                                "",
                                "\n",
                                "    AWS_IAM_SLAVE_ROLE_NAME=",
                                {
                                    "Ref": "SlaveRole"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                                "- \"content\": |-\n",
                                "    {}\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/slave\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/aws\n"
                            ]
                        ]
                    }
                }
            }
        },
        "MasterLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "ImageId": {
                    "Ref": "Ami"
                },
                "IamInstanceProfile": {
                    "Ref": "MasterInstanceProfile"
                },
                "KeyName": {
                    "Ref": "SshKeyPair"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sdb",
                        "VirtualName": "ephemeral0"
                    }
                ],
                "InstanceType": "m3.xlarge",
                "SecurityGroups": [
                    {
                        "Ref": "MasterSecurityGroup"
                    },
                    {
                        "Ref": "AdminSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#cloud-config\n",
                                "\"coreos\":\n",
                                "  \"units\":\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                                "      Before=var-lib.mount dbus.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      RemainAfterExit=yes\n",
                                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                                "    \"name\": |-\n",
                                "      format-var-lib-ephemeral.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=AWS Setup: Mount /var/lib\n",
                                "      Before=dbus.service\n",
                                "      [Mount]\n",
                                "      What=/dev/xvdb\n",
                                "      Where=/var/lib\n",
                                "      Type=ext4\n",
                                "    \"name\": |-\n",
                                "      var-lib.mount\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      etcd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      update-engine.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      locksmithd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"name\": |-\n",
                                "      systemd-resolved.service\n",
                                "  - \"command\": |-\n",
                                "      restart\n",
                                "    \"name\": |-\n",
                                "      systemd-journald.service\n",
                                "  - \"command\": |-\n",
                                "      restart\n",
                                "    \"name\": |-\n",
                                "      docker.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Before=dcos.target\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      StandardOutput=journal+console\n",
                                "      StandardError=journal+console\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                                "    \"name\": |-\n",
                                "      dcos-link-env.service\n",
                                "  - \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                                "      After=network-online.target\n",
                                "      Wants=network-online.target\n",
                                "      ConditionPathExists=!/opt/mesosphere/\n",
                                "      [Service]\n",
                                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                                "      Type=oneshot\n",
                                "      StandardOutput=journal+console\n",
                                "      StandardError=journal+console\n",
                                "      ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                                "    \"name\": |-\n",
                                "      dcos-download.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                                "      Requires=dcos-download.service\n",
                                "      After=dcos-download.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      StandardOutput=journal+console\n",
                                "      StandardError=journal+console\n",
                                "      EnvironmentFile=/opt/mesosphere/environment\n",
                                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                                "      [Install]\n",
                                "      WantedBy=multi-user.target\n",
                                "    \"enable\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      dcos-setup.service\n",
                                "    \"no_block\": !!bool |-\n",
                                "      true\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=AWS Setup: Signal CloudFormation Success\n",
                                "      After=dcos.target\n",
                                "      Requires=dcos.target\n",
                                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                                "      [Service]\n",
                                "      Type=simple\n",
                                "      Restart=on-failure\n",
                                "      StartLimitInterval=0\n",
                                "      RestartSec=15s\n",
                                "      EnvironmentFile=/opt/mesosphere/environment\n",
                                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\"\n",
                                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                                "    \"name\": |-\n",
                                "      dcos-cfn-signal.service\n",
                                "  \"update\":\n",
                                "    \"reboot-strategy\": |-\n",
                                "      off\n",
                                "\"write_files\":\n",
                                "- \"content\": |\n",
                                "    https://downloads.dcos.io/dcos/EarlyAccess\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/repository-url\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    BOOTSTRAP_ID=3a2b7e03c45cd615da8dfb1b103943894652cd71\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    [\"dcos-config--setup_b9372277c9fedaca077d7638e6e445af062d1d86\", \"dcos-metadata--setup_b9372277c9fedaca077d7638e6e445af062d1d86\"]\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    [Journal]\n",
                                "    MaxLevelConsole=warning\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    MESOS_CLUSTER=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                                "- \"content\": |\n",
                                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                                {
                                    "Ref": "OAuthEnabled"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                                "- \"content\": |\n",
                                "    MASTER_SOURCE=exhibitor\n",
                                "    EXHIBITOR_ADDRESS=",
                                {
                                    "Fn::GetAtt": [
                                        "InternalMasterLoadBalancer",
                                        "DNSName"
                                    ]
                                },
                                "",
                                "\n",
                                "    RESOLVERS=169.254.169.253\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                                "- \"content\": |\n",
                                "    EXHIBITOR_BACKEND=AWS_S3\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_S3_BUCKET=",
                                {
                                    "Ref": "ExhibitorS3Bucket"
                                },
                                "",
                                "\n",
                                "    AWS_S3_PREFIX=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                                "- \"content\": |\n",
                                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                                "    \"authentication\":{\"enabled\":false},\n",
                                "\n",
                                "    \"oauth\":{\"enabled\":",
                                {
                                    "Ref": "OAuthEnabled"
                                },
                                ",\"authHost\":\"https://dcos.auth0.com\"},",
                                "\n",
                                "\n",
                                "    \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":true}}}}\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                                "- \"content\": |\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_ID=",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_NAME=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "    AWS_IAM_MASTER_ROLE_NAME=",
                                {
                                    "Ref": "MasterRole"
                                },
                                "",
                                "\n",
                                "    AWS_IAM_SLAVE_ROLE_NAME=",
                                {
                                    "Ref": "SlaveRole"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                                "- \"content\": |-\n",
                                "    {}\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/master\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/aws_master\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/aws\n"
                            ]
                        ]
                    }
                }
            }
        },
        "PublicSlaveLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "ImageId": {
                    "Ref": "Ami"
                },
                "IamInstanceProfile": {
                    "Ref": "SlaveInstanceProfile"
                },
                "KeyName": {
                    "Ref": "SshKeyPair"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sdb",
                        "VirtualName": "ephemeral0"
                    }
                ],
                "InstanceType": "m3.xlarge",
                "SecurityGroups": [
                    {
                        "Ref": "PublicSlaveSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#cloud-config\n",
                                "\"coreos\":\n",
                                "  \"units\":\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                                "      Before=var-lib.mount dbus.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      RemainAfterExit=yes\n",
                                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                                "    \"name\": |-\n",
                                "      format-var-lib-ephemeral.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=AWS Setup: Mount /var/lib\n",
                                "      Before=dbus.service\n",
                                "      [Mount]\n",
                                "      What=/dev/xvdb\n",
                                "      Where=/var/lib\n",
                                "      Type=ext4\n",
                                "    \"name\": |-\n",
                                "      var-lib.mount\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      etcd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      update-engine.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"mask\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      locksmithd.service\n",
                                "  - \"command\": |-\n",
                                "      stop\n",
                                "    \"name\": |-\n",
                                "      systemd-resolved.service\n",
                                "  - \"command\": |-\n",
                                "      restart\n",
                                "    \"name\": |-\n",
                                "      systemd-journald.service\n",
                                "  - \"command\": |-\n",
                                "      restart\n",
                                "    \"name\": |-\n",
                                "      docker.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Before=dcos.target\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      StandardOutput=journal+console\n",
                                "      StandardError=journal+console\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                                "    \"name\": |-\n",
                                "      dcos-link-env.service\n",
                                "  - \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                                "      After=network-online.target\n",
                                "      Wants=network-online.target\n",
                                "      ConditionPathExists=!/opt/mesosphere/\n",
                                "      [Service]\n",
                                "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
                                "      Type=oneshot\n",
                                "      StandardOutput=journal+console\n",
                                "      StandardError=journal+console\n",
                                "      ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
                                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                                "    \"name\": |-\n",
                                "      dcos-download.service\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |\n",
                                "      [Unit]\n",
                                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                                "      Requires=dcos-download.service\n",
                                "      After=dcos-download.service\n",
                                "      [Service]\n",
                                "      Type=oneshot\n",
                                "      StandardOutput=journal+console\n",
                                "      StandardError=journal+console\n",
                                "      EnvironmentFile=/opt/mesosphere/environment\n",
                                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                                "      [Install]\n",
                                "      WantedBy=multi-user.target\n",
                                "    \"enable\": !!bool |-\n",
                                "      true\n",
                                "    \"name\": |-\n",
                                "      dcos-setup.service\n",
                                "    \"no_block\": !!bool |-\n",
                                "      true\n",
                                "  - \"command\": |-\n",
                                "      start\n",
                                "    \"content\": |-\n",
                                "      [Unit]\n",
                                "      Description=AWS Setup: Signal CloudFormation Success\n",
                                "      After=dcos.target\n",
                                "      Requires=dcos.target\n",
                                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                                "      [Service]\n",
                                "      Type=simple\n",
                                "      Restart=on-failure\n",
                                "      StartLimitInterval=0\n",
                                "      RestartSec=15s\n",
                                "      EnvironmentFile=/opt/mesosphere/environment\n",
                                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\"\n",
                                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                                "    \"name\": |-\n",
                                "      dcos-cfn-signal.service\n",
                                "  \"update\":\n",
                                "    \"reboot-strategy\": |-\n",
                                "      off\n",
                                "\"write_files\":\n",
                                "- \"content\": |\n",
                                "    https://downloads.dcos.io/dcos/EarlyAccess\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/repository-url\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    BOOTSTRAP_ID=3a2b7e03c45cd615da8dfb1b103943894652cd71\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/bootstrap-id\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    [\"dcos-config--setup_b9372277c9fedaca077d7638e6e445af062d1d86\", \"dcos-metadata--setup_b9372277c9fedaca077d7638e6e445af062d1d86\"]\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    [Journal]\n",
                                "    MaxLevelConsole=warning\n",
                                "  \"owner\": |-\n",
                                "    root\n",
                                "  \"path\": |-\n",
                                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                                "  \"permissions\": |-\n",
                                "    0644\n",
                                "- \"content\": |\n",
                                "    MESOS_CLUSTER=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                                "- \"content\": |\n",
                                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                                {
                                    "Ref": "OAuthEnabled"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                                "- \"content\": |\n",
                                "    MASTER_SOURCE=exhibitor\n",
                                "    EXHIBITOR_ADDRESS=",
                                {
                                    "Fn::GetAtt": [
                                        "InternalMasterLoadBalancer",
                                        "DNSName"
                                    ]
                                },
                                "",
                                "\n",
                                "    RESOLVERS=169.254.169.253\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                                "- \"content\": |\n",
                                "    EXHIBITOR_BACKEND=AWS_S3\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_S3_BUCKET=",
                                {
                                    "Ref": "ExhibitorS3Bucket"
                                },
                                "",
                                "\n",
                                "    AWS_S3_PREFIX=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                                "- \"content\": |\n",
                                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                                "    \"authentication\":{\"enabled\":false},\n",
                                "\n",
                                "    \"oauth\":{\"enabled\":",
                                {
                                    "Ref": "OAuthEnabled"
                                },
                                ",\"authHost\":\"https://dcos.auth0.com\"},",
                                "\n",
                                "\n",
                                "    \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":true}}}}\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                                "- \"content\": |\n",
                                "    AWS_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_ID=",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "",
                                "\n",
                                "    AWS_STACK_NAME=",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "",
                                "\n",
                                "    AWS_IAM_MASTER_ROLE_NAME=",
                                {
                                    "Ref": "MasterRole"
                                },
                                "",
                                "\n",
                                "    AWS_IAM_SLAVE_ROLE_NAME=",
                                {
                                    "Ref": "SlaveRole"
                                },
                                "",
                                "\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                                "- \"content\": |-\n",
                                "    {}\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/slave_public\n",
                                "- \"content\": \"\"\n",
                                "  \"path\": |-\n",
                                "    /etc/mesosphere/roles/aws\n"
                            ]
                        ]
                    }
                }
            }
        },
        "MasterServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "PublicInternetRoute",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT45M",
                    "Count": {
                        "Ref": "NumMasterNodes"
                    }
                }
            },
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "MasterLaunchConfig"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnetA"
                    },
                    {
                        "Ref": "PublicSubnetB"
                    },
                    {
                        "Ref": "PublicSubnetC"
                    }
                ],
                "DesiredCapacity": {
                    "Ref": "NumMasterNodes"
                },
                "MinSize": {
                    "Ref": "NumMasterNodes"
                },
                "MaxSize": {
                    "Ref": "NumMasterNodes"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    },
                    {
                        "Ref": "InternalMasterLoadBalancer"
                    }
                ],
                "Tags": [
                    {
                        "Value": "mesos-master",
                        "Key": "role",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "PublicSlaveServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": "PublicInternetRoute",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT45M",
                    "Count": {
                        "Ref": "NumPublicSlaveNodes"
                    }
                }
            },
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "PublicSlaveLaunchConfig"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnetA"
                    },
                    {
                        "Ref": "PublicSubnetB"
                    },
                    {
                        "Ref": "PublicSubnetC"
                    }
                ],
                "DesiredCapacity": {
                    "Ref": "NumPublicSlaveNodes"
                },
                "MinSize": {
                    "Ref": "NumPublicSlaveNodes"
                },
                "MaxSize": {
                    "Ref": "NumPublicSlaveNodes"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "PublicSlaveLoadBalancer"
                    }
                ],
                "Tags": [
                    {
                        "Value": "mesos-slave",
                        "Key": "role",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "SlaveServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": [
                "PrivateInternetRouteA",
                "PrivateInternetRouteB",
                "PrivateInternetRouteC"
            ],
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT45M",
                    "Count": {
                        "Ref": "NumPrivateSlaveNodes"
                    }
                }
            },
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "SlaveLaunchConfig"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnetA"
                    },
                    {
                        "Ref": "PrivateSubnetB"
                    },
                    {
                        "Ref": "PrivateSubnetC"
                    }
                ],
                "DesiredCapacity": {
                    "Ref": "NumPrivateSlaveNodes"
                },
                "MinSize": {
                    "Ref": "NumPrivateSlaveNodes"
                },
                "MaxSize": {
                    "Ref": "NumPrivateSlaveNodes"
                },
                "Tags": [
                    {
                        "Value": "mesos-slave",
                        "Key": "role",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "DnsAddress": {
            "Description": "Mesos master",
            "Value": {
                "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                ]
            }
        },
        "PublicSlaveDnsAddress": {
            "Description": "Public slaves",
            "Value": {
                "Fn::GetAtt": [
                    "PublicSlaveLoadBalancer",
                    "DNSName"
                ]
            }
        }
    }
}
